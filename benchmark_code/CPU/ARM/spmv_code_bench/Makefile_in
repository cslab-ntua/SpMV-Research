.PHONY: all clean

SHELL := bash
.SHELLFLAGS := -eu -o pipefail -c
.ONESHELL:
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables
MAKECMDGOALS ?=

# Targets that don't generate dependency files.
NODEPS = clean

DIRS = obj

define Rule_Auto_Dependencies_base =
    $(1:.o=.d): $(2) | $(DIRS)
	@echo 'Generating dependencies file:  $(1)'
	gcc $(3) -MT '$(1:.o=.d)' -MM -MG '$(2)' -MF '$(1:.o=.d)'
    ifeq (0, $(words $(findstring $(MAKECMDGOALS),$(NODEPS))))
        -include $(1:.o=.d)
    endif
    $(1): $(1:.o=.d)
endef

# 1:object_file 2:source_file 3:compilation_flags
define Rule_Auto_Dependencies =
    $(eval $(call Rule_Auto_Dependencies_base,$(1),$(2),$(3)))
    $(1): $(2)
endef


LIB_SRC = pthread_functions.c omp_functions.c topology.c hash.c random.c hashtable.c bitstream.c bytestream.c array_metrics.c string_util.c io.c parallel_io.c plot.c read_mtx.c matrix_market.c openfoam_matrix.c rapl.c csr_converter.c csc_converter.c csr_converter_double.c kmeans.c kmeans_char.c csr_util.c csc_util.c artificial_matrix_generation.c ordered_set.c

LIB_OBJ := $(LIB_SRC)
LIB_OBJ := $(patsubst %.c,obj/%$(SUFFIX).o,$(LIB_OBJ))
LIB_OBJ := $(patsubst %.cpp,obj/%$(SUFFIX).o,$(LIB_OBJ))


EXE = $(TARGETS)

all: $(EXE) | $(DIRS)


# x86_64 aarch64 ppc64le
CPPFLAGS_CUSTOM =
ifeq ($(ARCH), x86_64)
    # CPPFLAGS_CUSTOM += -mavx2
    # CPPFLAGS_CUSTOM += -mavx512f
else ifeq ($(ARCH), aarch64)
endif


spmv_csr_naive$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'NAIVE' $^ -o $@ $(LDFLAGS)
spmv_csr$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) $^ -o $@ $(LDFLAGS)
cg_csr$(SUFFIX).exe: obj/cg_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) $^ -o $@ $(LDFLAGS)
spmv_csr_kahan$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_KAHAN' $^ -o $@ $(LDFLAGS)
spmv_csr_prefetch$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_PREFETCH' $^ -o $@ $(LDFLAGS)
spmv_csr_simd$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_SIMD' $^ -o $@ $(LDFLAGS)
spmv_csr_vector$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_VECTOR' $^ -o $@ $(LDFLAGS)
spmv_csr_vector_perfect_nnz_balance$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_VECTOR_PERFECT_NNZ_BALANCE' $^ -o $@ $(LDFLAGS)

spmv_ldu$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_ldu.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $^ -o $@ $(LDFLAGS)
spmv_ell$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_ell.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $^ -o $@ $(LDFLAGS)

spmv_csr_vector_sve$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_sve.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_SVE_VECTOR' $^ -o $@ $(LDFLAGS)
spmv_csr_vector_perfect_nnz_balance_sve$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_sve.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_CUSTOM) -D'CUSTOM_SVE_VECTOR_PERFECT_NNZ_BALANCE' $^ -o $@ $(LDFLAGS)


CPPFLAGS_ARMPL =
CPPFLAGS_ARMPL += -I$(ARMPL_ROOT_DIR)/include

LDFLAGS_ARMPL =
LDFLAGS_ARMPL += -L$(ARMPL_ROOT_DIR)/lib -larmpl_mp

spmv_armpl$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_armpl.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_ARMPL) $^ -o $@ $(LDFLAGS) $(LDFLAGS_ARMPL)


LDFLAGS_NV =
LDFLAGS_NV += -lcuda
LDFLAGS_NV += -lcudart
LDFLAGS_NV += -lcublas

spmv_csr_cuda$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_buffer$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_buffer.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_reduce$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_reduce.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_const_nnz_per_thread$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_const_nnz_per_thread.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)

spmv_csr_cuda_t${NUM_THREADS}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_THREADS=${NUM_THREADS} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_s${NUM_STREAMS}_t${NUM_THREADS}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=${NUM_STREAMS} -DNUM_THREADS=${NUM_THREADS} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)

spmv_csr_cuda_buffer_t${NUM_THREADS}_rc${ROW_CLUSTER_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_buffer.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_THREADS=${NUM_THREADS} -DROW_CLUSTER_SIZE=${ROW_CLUSTER_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_buffer_s${NUM_STREAMS}_t${NUM_THREADS}_rc${ROW_CLUSTER_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_buffer_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=${NUM_STREAMS} -DNUM_THREADS=${NUM_THREADS} -DROW_CLUSTER_SIZE=${ROW_CLUSTER_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)

spmv_csr_cuda_const_nnz_per_thread_b${BLOCK_SIZE}_nnz${NNZ_PER_THREAD}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_const_nnz_per_thread.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DBLOCK_SIZE=${BLOCK_SIZE} -DNNZ_PER_THREAD=${NNZ_PER_THREAD} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_const_nnz_per_thread_s${NUM_STREAMS}_b${BLOCK_SIZE}_nnz${NNZ_PER_THREAD}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_const_nnz_per_thread_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=${NUM_STREAMS} -DBLOCK_SIZE=${BLOCK_SIZE} -DNNZ_PER_THREAD=${NNZ_PER_THREAD} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)


spmv_csr_cuda_vector_b${BLOCK_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_vector.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DBLOCK_SIZE=${BLOCK_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_vector_s${NUM_STREAMS}_b${BLOCK_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_vector_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=${NUM_STREAMS} -DBLOCK_SIZE=${BLOCK_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)

spmv_csr_cuda_adaptive_b${BLOCK_SIZE}_mb${MULTIBLOCK_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_adaptive.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DBLOCK_SIZE=${BLOCK_SIZE} -DMULTIBLOCK_SIZE=${MULTIBLOCK_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)
spmv_csr_cuda_adaptive_s${NUM_STREAMS}_b${BLOCK_SIZE}_mb${MULTIBLOCK_SIZE}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr_cuda_adaptive_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=${NUM_STREAMS} -DBLOCK_SIZE=${BLOCK_SIZE} -DMULTIBLOCK_SIZE=${MULTIBLOCK_SIZE} --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)


# Research GPU formats
CPPFLAGS_CSR5_CUDA = 
CPPFLAGS_CSR5_CUDA += -Wno-deprecated-writable-strings -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-sign-compare -Wno-unknown-pragmas -Wno-write-strings -Wno-unused-result
# CPPFLAGS_CSR5_CUDA += -I/various/pmpakos/epyc5_libs/cuda-samples/Common
CPPFLAGS_CSR5_CUDA += -Icsr5_cuda/Common

LDFLAGS_CSR5_CUDA =
LDFLAGS_CSR5_CUDA += -lcudart

# diag-suppress is used to suppress warnings
# warning #68-D  : integer conversion resulted in a change of sign
# warning #2464-D: conversion from a string literal to "char *" is deprecated
spmv_csr5_cuda$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_csr5_cuda.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CSR5_CUDA)" -diag-suppress=68,2464 $^ -o $@ $(LDFLAGS) $(LDFLAGS_CSR5_CUDA)

spmv_merge_cuda$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_merge_cuda.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NV)

CPPFLAGS_DASP_CUDA = 
CPPFLAGS_DASP_CUDA +=

LDFLAGS_DASP_CUDA =
LDFLAGS_DASP_CUDA += -lcudart

spmv_dasp_cuda$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_dasp_cuda.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_DASP_CUDA)" -D f64 -diag-suppress=550 -Xcompiler -fopenmp-simd $^ -o $@ $(LDFLAGS) $(LDFLAGS_DASP_CUDA)


CPPFLAGS_CUSPARSE =
# CPPFLAGS_CUSPARSE += -I'$(CUDA_TOOLKIT)/include'

LDFLAGS_CUSPARSE =
LDFLAGS_CUSPARSE += -lcuda
LDFLAGS_CUSPARSE += -lcudart
LDFLAGS_CUSPARSE += -lcusparse
LDFLAGS_CUSPARSE += -lcublas

spmv_cusparse_csr$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_cusparse_csr.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CUSPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_CUSPARSE)
spmv_cusparse_csr_s${NUM_STREAMS}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_cusparse_csr_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=$(NUM_STREAMS) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CUSPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_CUSPARSE)

spmv_cusparse_coo$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_cusparse_coo.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CUSPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_CUSPARSE)
spmv_cusparse_coo_s${NUM_STREAMS}$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_cusparse_coo_stream.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) -DNUM_STREAMS=$(NUM_STREAMS) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CUSPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_CUSPARSE)

spmv_cusparse_csc$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_cusparse_csc.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_CUSPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_CUSPARSE)

CPPFLAGS_NVPL_SPARSE =
# CPPFLAGS_NVPL_SPARSE += -I'$(CUDA_TOOLKIT)/include'

LDFLAGS_NVPL_SPARSE =
LDFLAGS_NVPL_SPARSE += -lcuda
LDFLAGS_NVPL_SPARSE += -lcudart
LDFLAGS_NVPL_SPARSE += -lnvpl_sparse
LDFLAGS_NVPL_SPARSE += -lcublas

spmv_nvpl_csr$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_nvpl_csr.cu $(LIB_OBJ)
	$(NVCC) $(NVCCFLAGS) -DTIME_IT=$(TIME_IT) --compiler-options "$(CPPFLAGS) $(CPPFLAGS_NVPL_SPARSE)" $^ -o $@ $(LDFLAGS) $(LDFLAGS_NVPL_SPARSE)


CPPFLAGS_MERGE =
# CPPFLAGS_MERGE += -D'CUB_MKL'
ifeq ($(ARCH), x86_64)
	CPPFLAGS_MERGE += -m64
    CPPFLAGS_MERGE += -mavx2
    # CPPFLAGS_MERGE += -mavx512f
else ifeq ($(ARCH), aarch64)
	CPPFLAG_MERGE += -march=armv9
endif
CPPFLAGS_MERGE += -Wno-deprecated-declarations -Wno-sign-compare
ifeq ($(CPP), xlc++)
    CPPFLAGS_MERGE += -Wno-unknown-attributes
    CPPFLAGS_MERGE += -Wno-unused-parameter
    CPPFLAGS_MERGE += -Wno-unused-variable
endif

LDFLAGS_MERGE =
LDFLAGS_MERGE += -lrt -Wl,--no-as-needed -lgomp -lpthread -lm -ldl
# LDFLAGS_MERGE += -lnuma

spmv_merge$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o spmv_kernel_merge.cpp $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_MERGE) $^ -o $@ $(LDFLAGS) $(LDFLAGS_MERGE)


CPPFLAGS_SPARSEX =
CPPFLAGS_SPARSEX += -Wno-unused-variable
CPPFLAGS_SPARSEX += -Wno-unused-but-set-variable
CPPFLAGS_SPARSEX += -Wno-unused-parameter
CPPFLAGS_SPARSEX += -Wno-sign-compare
CPPFLAGS_SPARSEX += -Wno-unused-local-typedefs
CPPFLAGS_SPARSEX += -Wno-deprecated-copy
CPPFLAGS_SPARSEX += -Wno-placement-new
CPPFLAGS_SPARSEX += -Wno-deprecated-declarations
CPPFLAGS_SPARSEX += -Wno-parentheses
CPPFLAGS_SPARSEX += -Wno-nonnull
CPPFLAGS_SPARSEX += -fopenmp
CPPFLAGS_SPARSEX += -I'$(BOOST_INC_PATH)'
CPPFLAGS_SPARSEX += -I'$(LLVM_INC_PATH)'
CPPFLAGS_SPARSEX += -I'$(SPARSEX_INC_PATH)'
CPPFLAGS_SPARSEX += $(shell ${SPARSEX_CONF_PATH}/sparsex-config --cppflags)

LDFLAGS_SPARSEX =
LDFLAGS_SPARSEX += $(shell ${SPARSEX_CONF_PATH}/sparsex-config --ldflags)
LDFLAGS_SPARSEX += -L'$(BOOST_LIB_PATH)'
LDFLAGS_SPARSEX += -L'$(LLVM_LIB_PATH)'
LDFLAGS_SPARSEX += -L'$(SPARSEX_LIB_PATH)'
LDFLAGS_SPARSEX += -lboost_regex
LDFLAGS_SPARSEX += -lboost_serialization
LDFLAGS_SPARSEX += -lboost_system
LDFLAGS_SPARSEX += -lboost_atomic
# LDFLAGS_SPARSEX += -lnuma
# LDFLAGS_SPARSEX += -lz -ltinfo -lrt -lgomp -lpthread -ldl -lpapi -fopenmp

# This needs to be put FIRST.
LDFLAGS_SPARSEX := -Wl,--no-as-needed $(LDFLAGS_SPARSEX)

spmv_sparsex$(SUFFIX).exe: obj/spmv_bench$(SUFFIX).o obj/spmv_kernel_sparsex$(SUFFIX).o $(LIB_OBJ)
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_SPARSEX) $^ -o $@ $(LDFLAGS) $(LDFLAGS_SPARSEX)

obj/spmv_kernel_sparsex$(SUFFIX).o: spmv_kernel_sparsex.cpp
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_SPARSEX) -c $< -o $@

$(call Rule_Auto_Dependencies,obj/spmv_bench$(SUFFIX).o,spmv_bench.cpp,$(CPPFLAGS))
	$(CPP) $(CPPFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/cg_bench$(SUFFIX).o,cg_bench.cpp,$(CPPFLAGS))
	$(CPP) $(CPPFLAGS) -c $< -o $@

$(call Rule_Auto_Dependencies,obj/artificial_matrix_generation$(SUFFIX).o,$(AMG_PATH)/artificial_matrix_generation.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/ordered_set$(SUFFIX).o,$(AMG_PATH)/ordered_set.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@

$(call Rule_Auto_Dependencies,obj/pthread_functions$(SUFFIX).o,$(library)/pthread_functions.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/omp_functions$(SUFFIX).o,$(library)/omp_functions.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/topology$(SUFFIX).o,$(library)/topology.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/hash$(SUFFIX).o,$(library)/hash/hash.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/random$(SUFFIX).o,$(library)/random.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/hashtable$(SUFFIX).o,$(library)/aux/hashtable.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/bitstream$(SUFFIX).o,$(library)/bitstream.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/bytestream$(SUFFIX).o,$(library)/bytestream.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/array_metrics$(SUFFIX).o,$(library)/array_metrics.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/string_util$(SUFFIX).o,$(library)/string_util.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/io$(SUFFIX).o,$(library)/io.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/parallel_io$(SUFFIX).o,$(library)/parallel_io.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/plot$(SUFFIX).o,$(library)/plot/plot.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/read_mtx$(SUFFIX).o,read_mtx.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/matrix_market$(SUFFIX).o,$(library)/storage_formats/matrix_market/matrix_market.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/openfoam_matrix$(SUFFIX).o,$(library)/storage_formats/openfoam/openfoam_matrix.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/rapl$(SUFFIX).o,$(library)/monitoring/power/rapl.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/csr_converter$(SUFFIX).o,$(library)/aux/csr_converter.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/csc_converter$(SUFFIX).o,$(library)/aux/csc_converter.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/csr_converter_double$(SUFFIX).o,$(library)/aux/csr_converter_double.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/kmeans$(SUFFIX).o,$(library)/kmeans/kmeans.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/kmeans_char$(SUFFIX).o,$(library)/kmeans/kmeans_char.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/csr_util$(SUFFIX).o,$(library)/aux/csr_util.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@
$(call Rule_Auto_Dependencies,obj/csc_util$(SUFFIX).o,$(library)/aux/csc_util.c,$(CFLAGS))
	$(CC) $(CFLAGS) -c $< -o $@


$(DIRS): %:
	mkdir -p $@

clean:
	$(RM) obj/* *.o *.exe a.out

