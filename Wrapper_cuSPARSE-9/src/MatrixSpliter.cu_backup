///
/// \author Anastasiadis Petros (panastas@cslab.ece.ntua.gr)
///
/// \brief A benchmark script for SpMV implementations
///

#include <cstdio>
#include "cuSPARSE.hpp"
/// TODO: If openmp/csr5 include is put before cuSP it doesn't compile :P
#include <numeric>
#include "OpenMP.hpp"

int main(int argc, char **argv) {
  /// Check Input
  massert(argc >= 2 && argc < 4,
          "Incorrect arguments.\nUsage: ./Executable Matrix_name.mtx [div]");
  char *name = argv[1];
  int div = 2;
  void *y_out, *y_out1;
  double cpu_timer, gpu_timer, exc_timer = 0;
  if (argc == 3) div = atoi(argv[2]);
  FILE *fp = fopen(name, "r");
  massert(fp && strstr(name, ".mtx") && !fclose(fp), "Invalid File");
  // print_devices();
  SpmvOperator op(name);
  double *x = (double *)malloc(op.m * sizeof(double));
  double *out = (double *)malloc(op.m * sizeof(double));
  vec_init_rand(x, op.m, 0);
  op.vec_alloc(x);

  SpmvOperator cuSPARSE_op(op);
  cuSPARSE_op.cuSPARSE_init();

  /// Execute serial COO
  SpmvCooData *data = (SpmvCooData *)op.format_data;
   //vec_print<int>(data->rowInd, op.nz, "rowInd");
   //vec_print<int>(data->colInd, op.nz, "colInd");
   //vec_print<double>((double*)data->values, op.nz, "values");

  op.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    vec_init((double *)op.y, op.n, 0);
    spmv_coo(data->rowInd, data->colInd, (double *)data->values, (double *)op.x,
             (double *)op.y, op.nz);
     y_out = op.y;
     op.y = op.x;
     op.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         op.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  op.timer = csecond() - op.timer - exc_timer;
exc_timer = 0 ; 
  printf("File=%s, n=%d, m=%d, n_z=%d Sparsity=%lf\nSerial-COO: ", op.mtx_name,
         op.n, op.m, op.nz, 1.0 * op.nz / op.n / op.m);
  report_results(op.timer, op.flops, op.bytes);
  printf("\n");

	vec_print<double>((double*)op.y, 10, "op.y");

  /// Execute OpenMP csr
  SpmvOperator openmp_op(cuSPARSE_op);
  openmp_op.format_convert(SPMV_FORMAT_CSR);
  openmp_op.mem_convert(SPMV_MEMTYPE_HOST);
  openmp_op.openmp_init();

  // Warmup
  for (int i = 0; i < 100; i++) openmp_op.openmp_csr();

  // Run OpenMP csr
  openmp_op.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    openmp_op.openmp_csr();
exc_timer = csecond() - exc_timer;
     y_out = openmp_op.y;
     openmp_op.y = openmp_op.x;
     openmp_op.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         openmp_op.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  openmp_op.timer = csecond() - openmp_op.timer - exc_timer;
  printf("openmp_csr: ");
  report_results(openmp_op.timer, openmp_op.flops, openmp_op.bytes);
  y_out = openmp_op.y_get_copy();
  check_result<double>((double *)y_out, (double *)op.y, openmp_op.n);

vec_print<double>((double*)y_out, 10, "openmp_op.y");

  /// Execute OpenMP csr
  SpmvOperator mkl_op(cuSPARSE_op);
  mkl_op.format_convert(SPMV_FORMAT_CSR);
  mkl_op.mkl_init();

  // Warmup
  for (int i = 0; i < 100; i++) mkl_op.mkl_csr();

  // Run Mkl csr
  mkl_op.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    mkl_op.mkl_csr();
     y_out = mkl_op.y;
     mkl_op.y = mkl_op.x;
     mkl_op.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         openmp_op.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  mkl_op.timer = csecond() - mkl_op.timer - exc_timer;
  printf("mkl_csr: ");
  report_results(mkl_op.timer, mkl_op.flops, mkl_op.bytes);
  y_out = mkl_op.y_get_copy();
  check_result<double>((double *)y_out, (double *)op.y, mkl_op.n);
  cpu_timer = mkl_op.timer;

  /*
    /// Execute csr5 cuda csr
    SpmvOperator csr5_op(cuSPARSE_op);
    csr5_op.format_convert(SPMV_FORMAT_CSR);
    csr5_op.cuCSR5_init();

    // Warmup
    for (int i = 0; i < 100; i++) csr5_op.cuCSR5_csr();
    cudaDeviceSynchronize();

    // Run csr5 cuda
    csr5_op.timer = csecond();
    for (int i = 0; i < NR_ITER; i++) {
      csr5_op.cuCSR5_csr();
      cudaDeviceSynchronize();

      //y_out = csr5_op.y;
      //csr5_op.y = csr5_op.x;
      //csr5_op.x = y_out;
      /*if ( i%10 == 0 ){
           exc_timer = csecond();

           exc_timer = csecond() - exc_timer;
      }
    }
    csr5_op.timer = csecond() - csr5_op.timer - exc_timer;
    printf("cuCSR5_csr: ");
    report_results(csr5_op.timer, csr5_op.flops, csr5_op.bytes);
    y_out = csr5_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, csr5_op.n);

    /// Execute csr5 avx512 csr
    SpmvOperator csr5_op(cuSPARSE_op);
    csr5_op.format_convert(SPMV_FORMAT_CSR);
    csr5_op.mem_convert(SPMV_MEMTYPE_HOST);
    csr5_op.avx512CSR5_init();

    // Warmup
    for (int i = 0; i < 100; i++) csr5_op.avx512CSR5_csr();

    // Run csr5 cuda
    csr5_op.timer = csecond();
    for (int i = 0; i < NR_ITER; i++) {
      csr5_op.avx512CSR5_csr();


      //y_out = csr5_op.y;
      //csr5_op.y = csr5_op.x;
      //csr5_op.x = y_out;
      /*if ( i%10 == 0 ){
           exc_timer = csecond();

           exc_timer = csecond() - exc_timer;
      }
    }
    csr5_op.timer = csecond() - csr5_op.timer - exc_timer;
    printf("avx512CSR5_csr: ");
    report_results(csr5_op.timer, csr5_op.flops, csr5_op.bytes);
  vec_init((double*)csr5_op.y, csr5_op.n, 0);
  csr5_op.avx512CSR5_csr();
    y_out = csr5_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, csr5_op.n);
  */

  /// Execute cuSPARSE csr
  cuSPARSE_op.format_convert(SPMV_FORMAT_CSR);

  // Warmup
  for (int i = 0; i < 100; i++) cuSPARSE_op.cuSPARSE_csr();
  cudaDeviceSynchronize();

  // Run cuSPARSE csr
  cuSPARSE_op.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    cuSPARSE_op.cuSPARSE_csr();
    cudaDeviceSynchronize();
     y_out = cuSPARSE_op.y;
     cuSPARSE_op.y = cuSPARSE_op.x;
     cuSPARSE_op.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         cuSPARSE_op.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  cuSPARSE_op.timer = csecond() - cuSPARSE_op.timer - exc_timer;
  printf("cuSPARSE_csr: ");
  report_results(cuSPARSE_op.timer, cuSPARSE_op.flops, cuSPARSE_op.bytes);
  y_out = cuSPARSE_op.y_get_copy();
  check_result<double>((double *)y_out, (double *)op.y, openmp_op.n);
  gpu_timer = cuSPARSE_op.timer;

  /// Execute cuSPARSE hyb
  cuSPARSE_op.format_convert(SPMV_FORMAT_HYB);
  cuSPARSE_op.vec_alloc(x);
  // Warmup
  for (int i = 0; i < 100; i++) cuSPARSE_op.cuSPARSE_hyb();
  cudaDeviceSynchronize();

  // Run cuSPARSE hyb
  cuSPARSE_op.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    cuSPARSE_op.cuSPARSE_hyb();
    cudaDeviceSynchronize();
     y_out = cuSPARSE_op.y;
     cuSPARSE_op.y = cuSPARSE_op.x;
     cuSPARSE_op.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         cuSPARSE_op.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  cuSPARSE_op.timer = csecond() - cuSPARSE_op.timer - exc_timer;
  printf("cuSPARSE_hyb: ");
  report_results(cuSPARSE_op.timer, cuSPARSE_op.flops, cuSPARSE_op.bytes);
  y_out = cuSPARSE_op.y_get_copy();
  check_result<double>((double *)y_out, (double *)op.y, openmp_op.n);

  // TODO: A dirty trick to predict GPU method performance drop
  double magic_num = 1;  // 3.0/4;

  double ratio = cpu_timer / (gpu_timer + cpu_timer) * magic_num;
  /// Test spliting
  SpmvOperator cuSPARSE_split_op_0(cuSPARSE_op, 0, cuSPARSE_op.nz * ratio, 0);
  // cuSPARSE_split_op_0.print_op();
  SpmvOperator cuSPARSE_split_op_1(cuSPARSE_op, cuSPARSE_op.nz * ratio,
                                   cuSPARSE_op.nz, 1);
massert ( cuSPARSE_op.nz == ( cuSPARSE_split_op_0.nz + cuSPARSE_split_op_1.nz) , "Problem with splitter");
int start_0 = 0, start_1, n_0, n_1; 
//TODO: Could break if zero line exists there?
  n_0 = cuSPARSE_split_op_0.n;
start_1 = n_0 ;
n_1 = cuSPARSE_split_op_1.n;

//data = (SpmvCooData *)cuSPARSE_split_op_0.format_data;
   //vec_print<int>(data->rowInd, cuSPARSE_split_op_0.nz, "rowInd0");
   //vec_print<int>(data->colInd, cuSPARSE_split_op_0.nz, "colInd0");
   //vec_print<double>((double*)data->values, cuSPARSE_split_op_0.nz, "values0");

//data = (SpmvCooData *)cuSPARSE_split_op_1.format_data;
   //vec_print<int>(data->rowInd, cuSPARSE_split_op_1.nz, "rowInd1");
   //vec_print<int>(data->colInd, cuSPARSE_split_op_1.nz, "colInd1");
   //vec_print<double>((double*)data->values, cuSPARSE_split_op_1.nz, "values1");


  cuSPARSE_split_op_1.format_convert(SPMV_FORMAT_CSR);
  cuSPARSE_split_op_1.mkl_init();
  cuSPARSE_split_op_0.format_convert(SPMV_FORMAT_CSR);



  for (int i = 0; i < 100; i++) cuSPARSE_split_op_0.cuSPARSE_csr();
  cudaDeviceSynchronize();

  cuSPARSE_split_op_0.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    cuSPARSE_split_op_0.cuSPARSE_csr();
    cudaDeviceSynchronize();
     //y_out = cuSPARSE_split_op_0.y;
     //cuSPARSE_split_op_0.y = cuSPARSE_split_op_0.x;
     //cuSPARSE_split_op_0.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         cuSPARSE_split_op_0.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    } */
  }
  cuSPARSE_split_op_0.timer = csecond() - cuSPARSE_split_op_0.timer - exc_timer;
  printf("cuSPARSE_csr(%lf): ", 1.0*cuSPARSE_split_op_0.nz/cuSPARSE_op.nz);
  report_results(cuSPARSE_split_op_0.timer, cuSPARSE_split_op_0.flops,
                 cuSPARSE_split_op_0.bytes);
  printf("\n");

  for (int i = 0; i < 100; i++) cuSPARSE_split_op_1.mkl_csr();

  cuSPARSE_split_op_1.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    cuSPARSE_split_op_1.mkl_csr();
     //y_out = cuSPARSE_split_op_1.y;
     //cuSPARSE_split_op_1.y = cuSPARSE_split_op_1.x;
     //cuSPARSE_split_op_1.x = y_out;
    /*if ( i%10 == 0 ){
         exc_timer = csecond();
         cuSPARSE_split_op_1.vec_alloc(x);
         exc_timer = csecond() - exc_timer;
    }*/
  }
  cuSPARSE_split_op_1.timer = csecond() - cuSPARSE_split_op_1.timer - exc_timer;
  printf("mkl_csr(%lf): ", 1.0*cuSPARSE_split_op_1.nz/cuSPARSE_op.nz);
  report_results(cuSPARSE_split_op_1.timer, cuSPARSE_split_op_1.flops,
                 cuSPARSE_split_op_1.bytes);
  printf("\n");

  for (int i = 0; i < 100; i++) {
    cuSPARSE_split_op_0.cuSPARSE_csr();
    cuSPARSE_split_op_1.mkl_csr();
    cudaDeviceSynchronize();
  }

  cuSPARSE_split_op_0.timer = csecond();
  for (int i = 0; i < NR_ITER; i++) {
    cuSPARSE_split_op_0.cuSPARSE_csr();
    cuSPARSE_split_op_1.mkl_csr();
    cudaDeviceSynchronize();
    exc_timer = csecond() - exc_timer;

//for (int i = 0; i< n_0; i++) ((double*)cuSPARSE_split_op_0.x)[i] = ((double*)cuSPARSE_split_op_0.y)[i];
//for (int i = 0; i< n_1; i++) ((double*)cuSPARSE_split_op_0.x)[n_0 + i] = ((double*)cuSPARSE_split_op_1.y)[i];

//for (int i = 0; i< n_0; i++) ((double*)cuSPARSE_split_op_1.x)[i] = ((double*)cuSPARSE_split_op_0.y)[i];
//for (int i = 0; i< n_1; i++) ((double*)cuSPARSE_split_op_1.x)[n_0 + i] = ((double*)cuSPARSE_split_op_1.y)[i];
	gpu_memCopy <<< 1,1 >>> ((double *)cuSPARSE_split_op_0.y, (double *)cuSPARSE_split_op_0.x, n_0 * sizeof(double));
memcpy(&(((double *)cuSPARSE_split_op_0.x)[n_0]) , cuSPARSE_split_op_1.y, n_1 * sizeof(double));  
	//copy_to_gpu(cuSPARSE_split_op_1.y, &(((double *)cuSPARSE_split_op_0.x)[n_0]), n_1 * sizeof(double));
     //memcpy(cuSPARSE_split_op_0.x, cuSPARSE_split_op_0.y, n_0 * sizeof(double));

     copy_from_gpu(cuSPARSE_split_op_1.x, cuSPARSE_split_op_0.y, n_0 * sizeof(double)); 
     memcpy(&(((double *)cuSPARSE_split_op_1.x)[n_0]), cuSPARSE_split_op_1.y, n_1 * sizeof(double));   
     //memcpy(cuSPARSE_split_op_1.x, cuSPARSE_split_op_0.y, n_0 * sizeof(double)); 
	 cudaDeviceSynchronize();
    exc_timer = csecond() - exc_timer;
    //y_out = cuSPARSE_split_op_1.x;
    //y_out1 = cuSPARSE_split_op_0.x;
    //cuSPARSE_split_op_1.x = cuSPARSE_split_op_1.y;
    //cuSPARSE_split_op_0.x = cuSPARSE_split_op_0.y;
    //cuSPARSE_split_op_1.y = y_out;
    //cuSPARSE_split_op_0.y = y_out1;
  }
//for (int i = 0; i< n_0; i++) ((double*)y_out)[i] = ((double*)cuSPARSE_split_op_0.y)[i];
//for (int i = 0; i< n_1; i++) ((double*)y_out)[n_0 + i] = ((double*)cuSPARSE_split_op_1.y)[i];
memcpy(y_out, cuSPARSE_split_op_0.y, n_0 * sizeof(double));   
memcpy(&(((double*)y_out)[n_0]), cuSPARSE_split_op_1.y, n_1 * sizeof(double)); 
  //y_out = cuSPARSE_split_op_0.y_get_copy();
  //y_out1 = cuSPARSE_split_op_1.y_get_copy();
  //vec_add<double>((double *)y_out, (double *)y_out1, op.n);
  cuSPARSE_split_op_0.timer = csecond() - cuSPARSE_split_op_0.timer;
  printf("Paired(transactions=%lfms): ", 1000*exc_timer/NR_ITER);
  report_results(cuSPARSE_split_op_0.timer, cuSPARSE_op.flops,
                 cuSPARSE_op.bytes);
  check_result<double>((double *)y_out, (double *)op.y, cuSPARSE_split_op_0.n);

  /*
    SpmvOperator cuSPARSE_op(op);
    cuSPARSE_op.cuSPARSE_init();

    /// Execute serial COO
    SpmvCooData *data = (SpmvCooData *)op.format_data;

    op.timer = csecond();
  for (int i = 0; i < NR_ITER-1; i++){
    spmv_coo(data->rowInd, data->colInd, (double *)data->values, (double *)op.x,
             (double *)op.y, op.nz);
           y_out = op.x;
           op.x = op.y;
           op.y = y_out;
           for ( int j = 0; j < op.n; j++) ((double *)op.y)[j] = 0;
  }
  spmv_coo(data->rowInd, data->colInd, (double *)data->values, (double *)op.x,
             (double *)op.y, op.nz);
    op.timer = csecond() - op.timer;
    printf("File=%s, n=%d, m=%d, n_z=%d Sparsity=%lf\nSerial-COO: ",
  op.mtx_name, op.n, op.m,
           op.nz, 1.0*op.nz/op.n/op.m);
    report_results(op.timer , op.flops, op.bytes);
    printf("\n");

    /// Execute OpenMP csr
    SpmvOperator openmp_op(cuSPARSE_op);
    openmp_op.mem_convert(SPMV_MEMTYPE_UNIFIED);
    openmp_op.format_convert(SPMV_FORMAT_CSR);
    openmp_op.openmp_init();

    for (int i = 0; i < NR_ITER; i++) openmp_op.openmp_csr();

    openmp_op.timer = csecond();
    for (int i = 0; i < NR_ITER-1; i++){
           openmp_op.openmp_csr();
           y_out = openmp_op.x;
           openmp_op.x = openmp_op.y;
           openmp_op.y = y_out;
    }
    openmp_op.openmp_csr();
    openmp_op.timer = csecond() - openmp_op.timer;
    printf("openmp_csr: ");
    report_results(openmp_op.timer, openmp_op.flops, openmp_op.bytes);
    y_out = openmp_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, openmp_op.n);

    /// Execute cuSPARSE csr
    cuSPARSE_op.format_convert(SPMV_FORMAT_CSR);
    cuSPARSE_op.timer = csecond();
    for (int i = 0; i < NR_ITER-1; i++){
           cuSPARSE_op.cuSPARSE_csr();
           cudaDeviceSynchronize();
           y_out = cuSPARSE_op.x;
           cuSPARSE_op.x = cuSPARSE_op.y;
           cuSPARSE_op.y = y_out;
    }
    cuSPARSE_op.cuSPARSE_csr();
    cudaDeviceSynchronize();
    cuSPARSE_op.timer = csecond() - cuSPARSE_op.timer;
    printf("cuSPARSE_csr: ");
    report_results(cuSPARSE_op.timer, cuSPARSE_op.flops, cuSPARSE_op.bytes);
    y_out = cuSPARSE_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, cuSPARSE_op.n);

    /// Execute cuSPARSE hyb
  cuSPARSE_op.mem_convert(SPMV_MEMTYPE_UNIFIED);
    cuSPARSE_op.format_convert(SPMV_FORMAT_HYB);
  cuSPARSE_op.vec_alloc(x);
  //cuSPARSE_op.print_op();
    cuSPARSE_op.timer = csecond();
    for (int i = 0; i < NR_ITER-1; i++){
           cuSPARSE_op.cuSPARSE_hyb();
           cudaDeviceSynchronize();
           y_out = cuSPARSE_op.x;
           cuSPARSE_op.x = cuSPARSE_op.y;
           cuSPARSE_op.y = y_out;
    }
    cuSPARSE_op.cuSPARSE_hyb();
    cudaDeviceSynchronize();
    cuSPARSE_op.timer = csecond() - cuSPARSE_op.timer;
    printf("cuSPARSE_hyb: ");
    report_results(cuSPARSE_op.timer, cuSPARSE_op.flops, cuSPARSE_op.bytes);
    y_out = cuSPARSE_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, cuSPARSE_op.n);

  cuSPARSE_op.format_convert(SPMV_FORMAT_COO);
  cuSPARSE_op.vec_alloc(x);
    /// Execute cuSPARSE bsr
  for (cuSPARSE_op.bsr_blockDim = 2; cuSPARSE_op.bsr_blockDim < 5;
  cuSPARSE_op.bsr_blockDim++)
  {

    SpmvOperator cuSPARSE_bsr_op(cuSPARSE_op);
     cuSPARSE_bsr_op.cuSPARSE_init();

    cuSPARSE_bsr_op.format_convert(SPMV_FORMAT_BSR);
    cuSPARSE_bsr_op.timer = csecond();
      for (int i = 0; i < NR_ITER-1; i++){
           cuSPARSE_bsr_op.cuSPARSE_bsr();
           cudaDeviceSynchronize();
           y_out = cuSPARSE_bsr_op.x;
           cuSPARSE_bsr_op.x = cuSPARSE_bsr_op.y;
           cuSPARSE_bsr_op.y = y_out;
    }
    cuSPARSE_bsr_op.cuSPARSE_bsr();
    cudaDeviceSynchronize();
    cuSPARSE_bsr_op.timer = csecond() - cuSPARSE_bsr_op.timer;
    printf("cuSPARSE_bsr(blockDim=%d): ",
  ((SpmvBsrData*)cuSPARSE_bsr_op.format_data)->blockDim);
    report_results(cuSPARSE_bsr_op.timer, cuSPARSE_bsr_op.flops,
  cuSPARSE_bsr_op.bytes);
    y_out = cuSPARSE_bsr_op.y_get_copy();
    check_result<double>((double *)y_out, (double *)op.y, cuSPARSE_bsr_op.n);
  }

  /// Test spliting
  SpmvOperator cuSPARSE_split_op_0(cuSPARSE_op, 0 , cuSPARSE_op.nz*2/3);
  //cuSPARSE_split_op_0.print_op();
  SpmvOperator cuSPARSE_split_op_1(cuSPARSE_op, cuSPARSE_op.nz*2/3 ,
  cuSPARSE_op.nz);
    cuSPARSE_split_op_1.format_convert(SPMV_FORMAT_CSR);
    cuSPARSE_split_op_1.openmp_init();
    cuSPARSE_split_op_0.format_convert(SPMV_FORMAT_HYB);

  for (int i = 0; i < NR_ITER ; i++) cuSPARSE_split_op_1.openmp_csr();
  for (int i = 0; i < NR_ITER ; i++) cuSPARSE_split_op_0.cuSPARSE_hyb();

    cuSPARSE_split_op_0.timer = csecond();
      for (int i = 0; i < NR_ITER-1; i++){
           cuSPARSE_split_op_0.cuSPARSE_hyb();
           cuSPARSE_split_op_1.openmp_csr();
           cudaDeviceSynchronize();
           vec_add<double>((double *)cuSPARSE_split_op_0.y, (double
  *)cuSPARSE_split_op_1.y, op.n);
           vec_copy<double>((double *)cuSPARSE_split_op_1.y, (double
  *)cuSPARSE_split_op_0.y, op.n, 0);
           y_out = cuSPARSE_split_op_1.x;
           y_out1 = cuSPARSE_split_op_0.x;
           cuSPARSE_split_op_1.x = cuSPARSE_split_op_1.y;
           cuSPARSE_split_op_0.x = cuSPARSE_split_op_0.y;
           cuSPARSE_split_op_1.y = y_out;
           cuSPARSE_split_op_0.y = y_out1;
    }
    cuSPARSE_split_op_0.cuSPARSE_hyb();
    cuSPARSE_split_op_1.openmp_csr();
    cudaDeviceSynchronize();
    //y_out = cuSPARSE_split_op_0.y_get_copy();
    //y_out1 = cuSPARSE_split_op_1.y_get_copy();
    //vec_add<double>((double *)y_out, (double *)y_out1, op.n);
    cuSPARSE_split_op_0.timer = csecond() - cuSPARSE_split_op_0.timer;
  printf("openmp_csr(theoretical): ");
  report_results(cuSPARSE_split_op_0.timer, cuSPARSE_split_op_1.flops,
  cuSPARSE_split_op_1.bytes);
  printf("\n");
  printf("cuSPARSE_csr(theoretical): ");
  report_results(cuSPARSE_split_op_0.timer, cuSPARSE_split_op_0.flops,
  cuSPARSE_split_op_0.bytes);
  printf("\n");
  printf("Paired: ");
  report_results(cuSPARSE_split_op_0.timer, cuSPARSE_op.flops,
  cuSPARSE_op.bytes);
    check_result<double>((double *)cuSPARSE_split_op_0.y, (double *)op.y,
  cuSPARSE_split_op_0.n);
  */
}
